# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'.source.js.jsx':
  'iteration':
    'prefix': 'it'
    'body': """
    \\{ this.props.${1:elements}.map(${2:element} =>
      <${3:MyComponent} {...${2:element}} key={${2:element}.id} />
    )\\}
    """
  'React component':
    'prefix': 'brc'
    'body':"""
    import React, { PropTypes } from 'react';

    /**
     * ${2:Description}
     */
    class ${1:BaseComponent} extends React.Component {
      /**
       * Props of the component
       *
       * @property {object} example Example of PropType
       */
      static get propTypes() {
        return {
          example: PropTypes.object
        };
      }

      /**
       * Render the ${1:BaseComponent} component
       */
      render() {
        return (
          <h1>BaseComponent!</h1>
        );
      }
    }

    // Export the class
    export default ${1:BaseComponent};
    """
  'React Container':
    'prefix': 'brcn'
    'body':"""
    import React, { PropTypes } from 'react';
    import { connect } from 'react-redux';

    /**
     * ${2:Description}
     */
    class ${1:BaseContainer} extends React.Component {
      /**
       * Props of the component
       *
       * @property {function} dispatch Dispatch actions to redux
       */
      static get propTypes() {
        return {
          dispatch: PropTypes.func.isRequired
        };
      }

      /**
       * Initialize ${1:BaseContainer} and bind methods
       */
      constructor(props) {
        super(props);

        this.state = {}
      }

      /**
       * Render the ${1:BaseContainer} component
       */
      render() {
        return (
          <h1>BaseContainer!</h1>
        );
      }
    }

    /**
     * Connect the container with redux state
     */
    const mapStateToProps = (state, props) => {
      const { dispatch } = props;

      return Object.assign({}, {
        ...props,
        dispatch
      })
    }

    // Export the class
    export default connect(mapStateToProps)(${1:BaseContainer});
    """
  'Stateless React component':
    'prefix': 'brsc',
    'body':"""
    import React, { PropTypes } from 'react';

    /**
     * Description
     */
    const ${1:StatelessComponent} = (props) => {
      // Render method
      return (
        <h1>Stateless</h1>
      );
    }

    ${1:StatelessComponent}.propTypes = {
    }

    ${1:StatelessComponent}.defaultProps = {
    }

    export default ${1:StatelessComponent};
    """
  'React test component':
    'prefix': 'brtc'
    'body':"""
    /*eslint-env node, mocha */
    import React from 'react';
    import expect from 'expect';
    import { shallow } from 'enzyme';

    import ${1:BaseComponent} from '../../components/${1:BaseComponent}';

    /** @test {${1:BaseComponent}} */
    describe('${1:BaseComponent}', function() {

      it('Should do something', function() {
        // ...
      });
    });
    """
